/*
 * generated by Xtext 2.15.0
 */
package org.opentestmodeling.vstep.ngt.core.tests

import com.google.inject.Inject
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.URL
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.ValueSource
import org.opentestmodeling.vstep.ngt.core.language.Model

@ExtendWith(InjectionExtension)
@InjectWith(LanguageInjectorProvider)
class LanguageParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
        @ParameterizedTest
        @ValueSource(strings = #[
                "001-21",
                "001-27",
                "001-28",
                "001-29",
                "001-30",
//                "001-31",
                "001-45",
                "001-48",
                "001-57"
//                "001-57-2"
                ])
        def void loadSample(String sampleName) {
                val url = '''https://raw.githubusercontent.com/opentestmodeling/sample-vstepngt-core/master/«sampleName».vstepngtcore''';
                val content = new BufferedReader(new InputStreamReader(new URL(url).openStream())).lines.toArray.join('\n')
		val result = parseHelper.parse(content)
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
        }
        
        @Test
        def void test_issue14() {
                val result = parseHelper.parse('''

container 構成テスト {
    [動作環境]
    [プラットフォーム] [ネットワーク]
    & [動作環境] <|-- [プラットフォーム]
    & [動作環境] <|-- [ネットワーク]
    [OS] [ハードウェア]
    & [プラットフォーム] <|-- [OS]
    & [プラットフォーム] <|-- [ハードウェア]
}
                ''')
                Assertions.assertNotNull(result)
                val errors = result.eResource.errors
                Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
        	
        }
}
