/**
 */
package org.opentestmodeling.vstep.ngt.core.model.core.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.opentestmodeling.vstep.ngt.core.model.core.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.opentestmodeling.vstep.ngt.core.model.core.CorePackage
 * @generated
 */
public class CoreAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static CorePackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CoreAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = CorePackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoreSwitch<Adapter> modelSwitch =
		new CoreSwitch<Adapter>() {
			@Override
			public Adapter caseNgtObject(NgtObject object) {
				return createNgtObjectAdapter();
			}
			@Override
			public Adapter caseNgtContainer(NgtContainer object) {
				return createNgtContainerAdapter();
			}
			@Override
			public Adapter caseNgtNode(NgtNode object) {
				return createNgtNodeAdapter();
			}
			@Override
			public Adapter caseNgtTarget(NgtTarget object) {
				return createNgtTargetAdapter();
			}
			@Override
			public Adapter caseNgtViewpoint(NgtViewpoint object) {
				return createNgtViewpointAdapter();
			}
			@Override
			public Adapter caseNgtQualityRisk(NgtQualityRisk object) {
				return createNgtQualityRiskAdapter();
			}
			@Override
			public Adapter caseNgtArrow(NgtArrow object) {
				return createNgtArrowAdapter();
			}
			@Override
			public Adapter caseNgtInheritance(NgtInheritance object) {
				return createNgtInheritanceAdapter();
			}
			@Override
			public Adapter caseNgtRetain(NgtRetain object) {
				return createNgtRetainAdapter();
			}
			@Override
			public Adapter caseNgtDependency(NgtDependency object) {
				return createNgtDependencyAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject)target);
	}


	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtObject <em>Ngt Object</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtObject
	 * @generated
	 */
	public Adapter createNgtObjectAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtContainer <em>Ngt Container</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtContainer
	 * @generated
	 */
	public Adapter createNgtContainerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtNode <em>Ngt Node</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtNode
	 * @generated
	 */
	public Adapter createNgtNodeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtTarget <em>Ngt Target</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtTarget
	 * @generated
	 */
	public Adapter createNgtTargetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtViewpoint <em>Ngt Viewpoint</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtViewpoint
	 * @generated
	 */
	public Adapter createNgtViewpointAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtQualityRisk <em>Ngt Quality Risk</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtQualityRisk
	 * @generated
	 */
	public Adapter createNgtQualityRiskAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtArrow <em>Ngt Arrow</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtArrow
	 * @generated
	 */
	public Adapter createNgtArrowAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtInheritance <em>Ngt Inheritance</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtInheritance
	 * @generated
	 */
	public Adapter createNgtInheritanceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtRetain <em>Ngt Retain</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtRetain
	 * @generated
	 */
	public Adapter createNgtRetainAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.opentestmodeling.vstep.ngt.core.model.core.NgtDependency <em>Ngt Dependency</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.opentestmodeling.vstep.ngt.core.model.core.NgtDependency
	 * @generated
	 */
	public Adapter createNgtDependencyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //CoreAdapterFactory
