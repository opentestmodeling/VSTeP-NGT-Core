/**
 */
package org.opentestmodeling.vstep.ngt.core.model.core.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;

import org.opentestmodeling.vstep.ngt.core.model.core.CorePackage;
import org.opentestmodeling.vstep.ngt.core.model.core.NgtQualityRisk;
import org.opentestmodeling.vstep.ngt.core.model.core.NgtViewpoint;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ngt Viewpoint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.opentestmodeling.vstep.ngt.core.model.core.impl.NgtViewpointImpl#getTestItems <em>Test Items</em>}</li>
 *   <li>{@link org.opentestmodeling.vstep.ngt.core.model.core.impl.NgtViewpointImpl#getQualityRisk <em>Quality Risk</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NgtViewpointImpl extends NgtNodeImpl implements NgtViewpoint {
	/**
	 * The cached value of the '{@link #getTestItems() <em>Test Items</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTestItems()
	 * @generated
	 * @ordered
	 */
	protected EList<String> testItems;

	/**
	 * The cached value of the '{@link #getQualityRisk() <em>Quality Risk</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getQualityRisk()
	 * @generated
	 * @ordered
	 */
	protected NgtQualityRisk qualityRisk;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NgtViewpointImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return CorePackage.Literals.NGT_VIEWPOINT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<String> getTestItems() {
		if (testItems == null) {
			testItems = new EDataTypeUniqueEList<String>(String.class, this, CorePackage.NGT_VIEWPOINT__TEST_ITEMS);
		}
		return testItems;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NgtQualityRisk getQualityRisk() {
		return qualityRisk;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetQualityRisk(NgtQualityRisk newQualityRisk, NotificationChain msgs) {
		NgtQualityRisk oldQualityRisk = qualityRisk;
		qualityRisk = newQualityRisk;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CorePackage.NGT_VIEWPOINT__QUALITY_RISK, oldQualityRisk, newQualityRisk);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setQualityRisk(NgtQualityRisk newQualityRisk) {
		if (newQualityRisk != qualityRisk) {
			NotificationChain msgs = null;
			if (qualityRisk != null)
				msgs = ((InternalEObject)qualityRisk).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CorePackage.NGT_VIEWPOINT__QUALITY_RISK, null, msgs);
			if (newQualityRisk != null)
				msgs = ((InternalEObject)newQualityRisk).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CorePackage.NGT_VIEWPOINT__QUALITY_RISK, null, msgs);
			msgs = basicSetQualityRisk(newQualityRisk, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CorePackage.NGT_VIEWPOINT__QUALITY_RISK, newQualityRisk, newQualityRisk));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case CorePackage.NGT_VIEWPOINT__QUALITY_RISK:
				return basicSetQualityRisk(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case CorePackage.NGT_VIEWPOINT__TEST_ITEMS:
				return getTestItems();
			case CorePackage.NGT_VIEWPOINT__QUALITY_RISK:
				return getQualityRisk();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case CorePackage.NGT_VIEWPOINT__TEST_ITEMS:
				getTestItems().clear();
				getTestItems().addAll((Collection<? extends String>)newValue);
				return;
			case CorePackage.NGT_VIEWPOINT__QUALITY_RISK:
				setQualityRisk((NgtQualityRisk)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case CorePackage.NGT_VIEWPOINT__TEST_ITEMS:
				getTestItems().clear();
				return;
			case CorePackage.NGT_VIEWPOINT__QUALITY_RISK:
				setQualityRisk((NgtQualityRisk)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case CorePackage.NGT_VIEWPOINT__TEST_ITEMS:
				return testItems != null && !testItems.isEmpty();
			case CorePackage.NGT_VIEWPOINT__QUALITY_RISK:
				return qualityRisk != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (testItems: ");
		result.append(testItems);
		result.append(')');
		return result.toString();
	}

} //NgtViewpointImpl
