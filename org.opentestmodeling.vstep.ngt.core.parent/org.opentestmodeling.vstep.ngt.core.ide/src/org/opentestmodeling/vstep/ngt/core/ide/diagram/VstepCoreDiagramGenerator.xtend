package org.opentestmodeling.vstep.ngt.core.ide.diagram

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.sprotty.LayoutOptions
import org.eclipse.sprotty.SEdge
import org.eclipse.sprotty.SGraph
import org.eclipse.sprotty.SLabel
import org.eclipse.sprotty.SModelElement
import org.eclipse.sprotty.SNode
import org.eclipse.sprotty.SPort
import org.eclipse.sprotty.xtext.IDiagramGenerator
import org.eclipse.sprotty.xtext.SIssueMarkerDecorator
import org.eclipse.sprotty.xtext.tracing.ITraceProvider
import org.opentestmodeling.vstep.ngt.core.language.Model
import org.opentestmodeling.vstep.ngt.core.language.TestViewpoint
import org.opentestmodeling.vstep.ngt.core.language.Relation
import org.opentestmodeling.vstep.ngt.core.language.TargetRef
import org.opentestmodeling.vstep.ngt.core.language.ViewpointRef
import org.opentestmodeling.vstep.ngt.core.language.LanguagePackage

class VstepCoreDiagramGenerator implements IDiagramGenerator {
	
	@Inject extension ITraceProvider
	@Inject extension SIssueMarkerDecorator
	
	override generate(Context context) {
		(context.resource.contents.head as Model).toSGraph(context)
	}
	
	def toSGraph(Model model, extension Context context) {
		(new SGraph [
			id = idCache.uniqueId(model, model.toString)
			children = (model.testElements.filter[x | x instanceof TestViewpoint].map[x | x as TestViewpoint].map[toSNode(context)] 
					  + model.testElements.filter[x | x instanceof Relation].map[x | x as Relation].map[toSEdge(context)]
			).toList 
		]).traceAndMark(model, context)
	}
	
	def SNode toSNode(TestViewpoint viewpoint, extension Context context) {
		val theId = idCache.uniqueId(viewpoint, viewpoint.name) 
		(new SNode [
			id = theId
			children =  #[
				(new SLabel [
					id = idCache.uniqueId(theId + '.label')
					text = viewpoint.name 
				]).trace(viewpoint),
				new SPort [
					id = idCache.uniqueId(theId + '.newTransition')
				]				
			]
			layout = 'stack'
			layoutOptions = new LayoutOptions [
				paddingTop = 10.0
				paddingBottom = 10.0
				paddingLeft = 10.0
				paddingRight = 10.0
				
			]
		]).traceAndMark(viewpoint, context)
	}
	
	def SEdge toSEdge(Relation relation, extension Context context) {
		(new SEdge [
			sourceId = idCache.getId(relation.eContainer)
			val dst = relation.dst
			if (dst instanceof TargetRef) {
				targetId = idCache.getId(relation.dst)
			} else if (dst instanceof ViewpointRef) {
				targetId = idCache.getId(relation.dst)
			}
			val src = if (relation.src instanceof TargetRef) {
				(relation.src as TargetRef).ref
			} else if (relation.src instanceof ViewpointRef) {
				(relation.src as ViewpointRef).ref
			}
			val theId = idCache.uniqueId(relation, sourceId + ':' + src.name + ':' + targetId)
			id = theId
			children = #[
				if (relation.stereotype !== null) {
					(new SLabel [
						id = idCache.uniqueId(theId + '.label')
						type = 'label:xref'
						text = relation.stereotype
					]).trace(relation, LanguagePackage.Literals.RELATION__DST, -1)
					
				}
			]
		]).traceAndMark(relation, context)
	}
	
	def <T extends SModelElement> T traceAndMark(T sElement, EObject element, Context context) {
		sElement.trace(element).addIssueMarkers(element, context) 
	}
}